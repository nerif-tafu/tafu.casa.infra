---
- name: Deploy Demo App Service
  hosts: all
  become: true
  vars:
    service_name: "demo-app-service"  # Default value if not provided
    runner: ""  # Default empty, will be overridden if discovered
    # Fallback domain calculation only used if runner-info is unavailable
    domain_base: "{{ lookup('env', 'DOMAIN_BASE') | default('preview.tafu.casa', true) }}"
    domain_full: "{{ runner + '.' if runner != '' else '' }}{{ domain_base }}"

  tasks:
    - name: Check if runner-info is available
      uri:
        url: "http://localhost/runner-info/json"
        method: GET
        return_content: yes
        status_code: 200
      register: runner_info_result
      ignore_errors: yes

    - name: Set runner info availability flag
      set_fact:
        runner_info_available: "{{ runner_info_result is defined and runner_info_result.status == 200 }}"

    - name: Parse runner information
      set_fact:
        # Parse the JSON content manually
        runner_json: "{{ runner_info_result.content | from_json }}"
      when: runner_info_available

    - name: Debug runner-info response
      debug:
        var: runner_json
      when: runner_info_available

    - name: Set runner variables
      set_fact:
        runner: "{{ runner_json.runner }}"
        domain_full: "{{ runner_json.domain }}"
      when: runner_info_available

    - name: Verify runner information
      fail:
        msg: >
          Cannot deploy service: runner-info service is not available and no runner was specified.
          Either ensure the runner-info service is running or specify a runner with -e "runner=name"
      when: not runner_info_available and runner == ""

    - name: Display runner information
      debug:
        msg: "Deploying to runner: {{ runner | default('default') }}"

    - name: Display service URL
      debug:
        msg: "Service will be accessible at: http://{{ service_name }}.{{ domain_full }}"

    - name: Create service directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "/opt/{{ service_name }}"
        - "/opt/{{ service_name }}/traefik"
        - "/opt/{{ service_name }}/traefik/dynamic"
        - "/opt/{{ service_name }}/frontend"
        - "/opt/{{ service_name }}/backend"

    - name: Copy frontend files
      copy:
        src: frontend/
        dest: "/opt/{{ service_name }}/frontend/"
        mode: '0755'
        directory_mode: '0755'

    - name: Copy backend files
      copy:
        src: backend/
        dest: "/opt/{{ service_name }}/backend/"
        mode: '0755'
        directory_mode: '0755'

    - name: Template backend server
      template:
        src: backend/server.js.j2
        dest: "/opt/{{ service_name }}/backend/server.js"
        mode: '0644'

    - name: Template frontend server
      template:
        src: frontend/server.js.j2
        dest: "/opt/{{ service_name }}/frontend/server.js"
        mode: '0644'

    - name: Copy docker-compose.yml
      template:
        src: docker-compose.yml.j2
        dest: "/opt/{{ service_name }}/docker-compose.yml"
        mode: '0644'
        # Pass all variables including runner

    - name: Copy traefik dynamic config template
      template:
        src: traefik/dynamic/routes.yml.j2
        dest: "/opt/{{ service_name }}/traefik/dynamic/routes.yml"
        mode: '0644'
        
    - name: Deploy with thorough cleanup
      shell: |
        cd /opt/{{ service_name }}
        docker compose down --remove-orphans --volumes
        docker compose rm -f
        docker system prune -f --volumes --filter "label=com.runner.service.name={{ service_name }}"
        docker compose build --no-cache --pull
        docker compose up -d

    - name: Trigger registry refresh
      uri:
        url: "http://192.168.3.225/api/refresh"
        method: GET
        status_code: 200
        headers:
          Host: "registry.{{ domain_base }}"
      ignore_errors: yes
      delegate_to: localhost
      when: "'192.168.3.225' not in inventory_hostname" 