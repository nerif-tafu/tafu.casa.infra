---
- name: Setup Core and Runner Templates
  hosts: all
  become: yes
  vars:
    username: finn-rm
    node_version: 22

  tasks:
    # System updates
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Upgrade system packages
      apt:
        upgrade: full

    # Create finn-rm user with sudo access
    - name: Create finn-rm user
      user:
        name: "{{ username }}"
        shell: /bin/bash
        groups: sudo
        append: yes

    - name: Set up passwordless sudo for finn-rm
      lineinfile:
        path: /etc/sudoers.d/finn-rm
        line: "finn-rm ALL=(ALL) NOPASSWD:ALL"
        create: yes
        mode: '0440'
        validate: 'visudo -cf %s'

    # Import SSH key
    - name: Install ssh-import-id
      apt:
        name: ssh-import-id
        state: present

    - name: Import SSH key for finn-rm
      become_user: "{{ username }}"
      command: ssh-import-id-lp finn-rm

    # Remove ubuntu user (add this after SSH key import to ensure we have access)
    - name: Check if ubuntu user exists
      command: id ubuntu
      register: ubuntu_exists
      ignore_errors: yes

    - name: Remove ubuntu user and home directory
      user:
        name: ubuntu
        state: absent
        remove: yes
      when: ubuntu_exists.rc == 0

    # Install Node.js and npm
    - name: Install Node.js prerequisites
      apt:
        name: 
          - curl
          - ca-certificates
          - gnupg

    - name: Add NodeSource repository
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | bash -
      args:
        creates: /etc/apt/sources.list.d/nodesource.list

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes

    # Install Docker
    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add finn-rm to docker group
      user:
        name: "{{ username }}"
        groups: docker
        append: yes

    # Install screen and tmux
    - name: Install screen and tmux
      apt:
        name:
          - screen
          - tmux
        state: present

    # Setup aliases
    - name: Create aliases file
      copy:
        dest: /home/{{ username }}/.bash_aliases
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: '0644'
        content: |
          shortcut() {
              # Define colors
              RED='\033[1;31m'
              GREEN='\033[1;32m'
              BLUE='\033[1;34m'
              CYAN='\033[1;36m'
              RESET='\033[0m'

              echo -e "${BLUE}Systemd Aliases:${RESET}"
              echo -e "  ${GREEN}jctl [unit]${RESET}      - ${CYAN}Show last 100 logs for a unit${RESET}"
              echo -e "  ${GREEN}sc-start [unit]${RESET}  - ${CYAN}Start a systemd service${RESET}"
              echo -e "  ${GREEN}sc-stop [unit]${RESET}   - ${CYAN}Stop a systemd service${RESET}"
              echo -e "  ${GREEN}sc-restart [unit]${RESET} - ${CYAN}Restart a systemd service${RESET}"
              echo -e "  ${GREEN}sc-reload [unit]${RESET} - ${CYAN}Reload a systemd service${RESET}"
              echo -e "  ${GREEN}sc-enable [unit]${RESET} - ${CYAN}Enable a systemd service${RESET}"
              echo -e "  ${GREEN}sc-disable [unit]${RESET} - ${CYAN}Disable a systemd service${RESET}"
              echo -e "  ${GREEN}sc-status [unit]${RESET} - ${CYAN}Show status of a systemd service${RESET}"
              echo -e "  ${GREEN}sc-log [unit]${RESET}    - ${CYAN}Show logs for a systemd service${RESET}"
              echo -e "  ${GREEN}sc-list${RESET}          - ${CYAN}List active systemd services${RESET}"
              echo -e "  ${GREEN}sc-list-all${RESET}      - ${CYAN}List all systemd services${RESET}"
              echo -e "  ${GREEN}sc-list-failed${RESET}   - ${CYAN}List failed systemd services${RESET}"
              echo -e "  ${GREEN}sc-dr${RESET}            - ${CYAN}Reload systemd daemon${RESET}"
          }

          alias jctl='journalctl -n 100 -u'
          alias sc-start='sudo systemctl start'
          alias sc-stop='sudo systemctl stop'
          alias sc-restart='sudo systemctl restart'
          alias sc-reload='sudo systemctl reload'
          alias sc-enable='sudo systemctl enable'
          alias sc-disable='sudo systemctl disable'
          alias sc-status='systemctl status'
          alias sc-log='journalctl -u'
          alias sc-list='systemctl list-units --type=service'
          alias sc-list-all='systemctl list-units --all --type=service'
          alias sc-list-failed='systemctl list-units --failed --type=service'
          alias sc-dr='sudo systemctl daemon-reload'

    - name: Ensure .bashrc sources .bash_aliases
      lineinfile:
        path: /home/{{ username }}/.bashrc
        line: '[ -f ~/.bash_aliases ] && . ~/.bash_aliases'
        create: yes
        owner: "{{ username }}"
        group: "{{ username }}"

    # Handle ubuntu user removal safely
    - name: Create cleanup script
      copy:
        dest: /root/cleanup-ubuntu.sh
        mode: '0700'
        content: |
          #!/bin/bash
          # Wait for the SSH session to end
          while pgrep -u ubuntu sshd > /dev/null; do
            sleep 1
          done
          # Remove ubuntu user and home directory
          deluser --remove-home ubuntu

    - name: Setup cleanup service
      copy:
        dest: /etc/systemd/system/cleanup-ubuntu.service
        mode: '0644'
        content: |
          [Unit]
          Description=Remove ubuntu user after SSH session ends
          After=network.target

          [Service]
          Type=simple
          ExecStart=/root/cleanup-ubuntu.sh

          [Install]
          WantedBy=multi-user.target

    - name: Start cleanup service
      systemd:
        name: cleanup-ubuntu
        state: started
        enabled: yes
        daemon_reload: yes
      when: ubuntu_exists.rc == 0 