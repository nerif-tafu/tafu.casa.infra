services:
  traefik:
    image: traefik:v2.10
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--accesslog.filepath=/dev/stdout"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.insecure=true"
      - "--ping=true"
      # Expose configuration via HTTP
      - "--providers.rest=true"
      - "--providers.rest.insecure=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - bridge-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bridge-api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      - "traefik.http.routers.bridge-api.service=api@internal"
      # Added for identification
      - "traefik.http.services.bridge-traefik.loadbalancer.server.port=80"
      - "com.runner.subdomain={{ runner }}"
      - "com.runner.domain={{ domain_full }}"
      # Make sure traefik can route multi-level subdomains
      - "traefik.http.middlewares.strip-service-prefix.stripprefix.prefixes=/"
      # Match any domain pattern with service name as first subdomain
      - "traefik.http.routers.services.rule=HostRegexp(`{service:[a-z0-9-]+}.{{ domain_full }}`)"
      - "traefik.http.routers.services.service={service}"
      - "traefik.http.routers.services.entrypoints=web"
      - "traefik.http.routers.services.priority=100"
      # Add a catch-all for host IP access (port 80)
      - "traefik.http.routers.catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.catchall.entrypoints=web"
      - "traefik.http.routers.catchall.priority=1"
      - "traefik.http.routers.catchall.service=runner-info"
    environment:
      - RUNNER={{ runner }}
      - DOMAIN_FULL={{ domain_full }}

  # Dynamic service discovery container
  runner-info:
    image: python:3.10-alpine
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./runner-info:/app
    networks:
      - bridge-network
    command: sh -c "pip install flask docker && python /app/app.py"
    environment:
      - RUNNER={{ runner }}
      - DOMAIN_FULL={{ domain_full }}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.runner-info.rule=Host(`runner-info.local`) || PathPrefix(`/runner-info`) || PathPrefix(`/runner-info/json`)"
      - "traefik.http.services.runner-info.loadbalancer.server.port=80"
      - "traefik.http.middlewares.runner-info-strip.stripprefix.prefixes=/runner-info"
      - "traefik.http.routers.runner-info.middlewares=runner-info-strip@docker"

networks:
  bridge-network:
    name: bridge-network
    external: true 