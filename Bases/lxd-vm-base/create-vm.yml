---
- name: Create LXD VM
  hosts: localhost
  connection: local
  become: true
  vars:
    # Default values
    vm_name: ""
    cpu_cores: "2"
    memory_gb: "4"
    disk_gb: "100"
    interactive: true  # Set to false to skip prompts

  tasks:
    - name: Prompt for VM details
      when: interactive|bool
      block:
        - name: Ask for VM name
          pause:
            prompt: "Enter VM name"
          register: vm_name_input
          when: not vm_name

        - name: Ask for CPU cores
          pause:
            prompt: "Enter number of CPU cores (default 2)"
          register: cpu_cores_input
          when: not cpu_cores

        - name: Ask for memory
          pause:
            prompt: "Enter memory in GB (default 4)"
          register: memory_gb_input
          when: not memory_gb

        - name: Ask for disk size
          pause:
            prompt: "Enter disk size in GB (default 100)"
          register: disk_gb_input
          when: not disk_gb

    - name: Set final values
      set_fact:
        vm_name: "{{ vm_name or vm_name_input.user_input }}"
        cpu_cores: "{{ cpu_cores or cpu_cores_input.user_input or '2' }}"
        memory_gb: "{{ memory_gb or memory_gb_input.user_input or '4' }}"
        disk_gb: "{{ disk_gb or disk_gb_input.user_input or '100' }}"

    - name: Fail if VM name is not provided
      fail:
        msg: "VM name must be provided either via --extra-vars or interactive prompt"
      when: not vm_name

    - name: Get list of all LXD profiles
      shell: "lxc profile list --format csv | cut -d',' -f1"
      register: all_profiles
      changed_when: false

    - name: Get list of all VMs
      shell: "lxc list --format csv | cut -d',' -f1"
      register: all_vms
      changed_when: false

    - name: Clean up orphaned VM profiles
      shell: "lxc profile delete {{ item }}"
      when: 
        - item.endswith('-profile')
        - item[:-8] not in all_vms.stdout_lines
      with_items: "{{ all_profiles.stdout_lines }}"
      ignore_errors: yes
      changed_when: true

    - name: Generate unique profile name
      set_fact:
        profile_name: "{{ vm_name }}-profile{% if vm_name + '-profile' in all_profiles.stdout_lines %}-{{ 100 | random }}{% endif %}"

    - name: Create VM profile
      shell: |
        cat <<EOF | lxc profile create {{ profile_name }}
        config:
          limits.cpu: "{{ cpu_cores }}"
          limits.memory: "{{ memory_gb }}GB"
          security.nesting: "true"
          security.syscalls.intercept.mknod: "true"
          security.syscalls.intercept.setxattr: "true"
        description: Custom VM profile for {{ vm_name }}
        devices:
          config:
            type: disk
            source: cloud-init:config
          eth0:
            type: nic
            name: eth0
            nictype: bridged
            parent: br0
          root:
            type: disk
            path: /
            pool: default
            size: {{ disk_gb }}GB
        EOF
      args:
        executable: /bin/bash
      register: profile_creation

    - name: Create VM
      community.general.lxd_container:
        name: "{{ vm_name }}"
        state: started
        source:
          type: image
          mode: pull
          server: https://cloud-images.ubuntu.com/releases/
          protocol: simplestreams
          alias: "24.04"
        profiles: ["{{ profile_name }}"]
        type: virtual-machine
        wait_for_ipv4_addresses: true
        timeout: 600
        ignore_volatile_options: true
        config:
          user.user-data: "{{ lookup('file', 'lxd-vm-base.yaml') }}"
      register: vm_creation

    - name: Clean up profile on failure
      community.general.lxd_profile:
        name: "{{ profile_name }}"
        state: absent
      when: vm_creation is failed

    - name: Wait for cloud-init to complete
      shell: lxc exec {{ vm_name }} -- cloud-init status --wait
      register: cloud_init_status
      until: "'status: done' in cloud_init_status.stdout"
      retries: 30
      delay: 10
      changed_when: false
      ignore_errors: true

    - name: Verify cloud-init completed successfully
      fail:
        msg: "Cloud-init failed to complete successfully"
      when: "'status: done' not in cloud_init_status.stdout"

    - name: Get VM IP address
      set_fact:
        vm_ip: "{{ vm_creation.addresses[vm_creation.addresses.keys() | first][0] }}"
      when: vm_creation.addresses is defined

    - name: Clean up all orphaned profiles for this VM
      community.general.lxd_profile:
        name: "{{ item }}"
        state: absent
      when: 
        - item.startswith(vm_name + '-profile-') or item == vm_name + '-profile'
        - item != profile_name
      with_items: "{{ all_profiles.stdout_lines }}"
      ignore_errors: yes

    - name: Display final connection information
      debug:
        msg:
          - "VM {{ vm_name }} is ready!"
          - "Connect using: lxc exec {{ vm_name }} bash"
          - "SSH using: ssh finn-rm@{{ vm_ip }}"
      when: vm_creation.addresses is defined

    - name: Wait for SSH to be available
      wait_for:
        host: "{{ vm_ip }}"
        port: 22
        timeout: 60
        sleep: 5

    - name: Add VM to inventory
      add_host:
        name: "{{ vm_name }}"
        ansible_host: "{{ vm_ip }}"
        ansible_user: finn-rm
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

- name: Run setup playbook
  import_playbook: setup-vm.yml 